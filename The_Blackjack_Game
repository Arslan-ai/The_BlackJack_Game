

# Ä°mporting random 

import random

# Creating global variables which contains ranks suits and their integer values after creating cards


suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}


# We assign a variable for playing games. You dont need to do it you can use Boolean's also
playing = True


# I created a card class to create each card in a deck


class Card:
    
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank
        self.value = values[rank]
    
    def __str__(self):
        return self.rank + " Of " + self.suit
    
# Deck class contains every card in a deck
class Deck:
    
    def __init__(self):
        self.deck = []  # start with an empty list
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit,rank))
 
# ___str__ defines cards and shows us card from deck. I used simple for statement to describe all cards in the deck
 
    def __str__(self):
        x = " "
        for card in self.deck:
            
            x += "\n" + card.__str__()
        return  x 


# Shuffle is for shuffle the deck we created

    def shuffle(self):
        random.shuffle(self.deck)
 
 
 
# Deal function is for getting a card from deck



    def deal(self):
        return self.deck.pop()


# I've tested there if classes are working 

test_deck = Deck()
print(test_deck)




# Hand class stands for Player's and Dealer's deck , It also contains number of aces and reduction of aces in game logic

class Hand:
    def __init__(self):
        self.cards = []  # start with an empty list as we did in the Deck class
        self.value = 0   # start with zero value
        self.aces = 0    # add an attribute to keep track of aces

# To calculate value, there is also a value on add_card function

    def add_card(self,card):
        self.cards.append(card)
        self.value += values[card.rank]
        
        if card.rank == "Ace":
            self.aces += 1
            
            
            
            
# We have a special adjusting function for aces 


    def adjust_for_ace(self):
        if self.aces > 0 and self.value > 21:
            self.value -= 10
            self.aces -= 1
            
            
            
            
 # To make bet, I created a Chips object          
class Chips:
    
    def __init__(self):
        self.total = 100  # This can be set to a default value or supplied by a user input
        self.bet = 0
        
    def win_bet(self):
        self.total += self.bet
    
    def lose_bet(self):
        self.total -= self.bet


# In this section, I tested if chips class works or not.

def take_bet(chips):
    chips = Chips()
    while True:
        ask = int(input("Please enter your bet"))
        if type(ask) == type([]):
            print("Sory I didn't understand you.")
        
        elif ask > chips.total:
            print("You can not exceed your total chips")
        else:
            ask = chips.bet
            break
            
            
            
# Hit object creates a card, removes from deck and add on hand


def hit(deck,hand):
    
    single_card = deck.deal()
    hand.add_card(single_card)
    hand.adjust_for_ace




# Hit or stand function ask player if they hit or stand.
def hit_or_stand(deck,hand):
    global playing  # to control an upcoming while loop
    
    while True:
        ask = input("Would you like to hit or stand? h or s")
        
        
        # I used .lower() and indexing if player misunderstood and say hit or STAND. With that game continue without a break
        
        
        if ask[0].lower() == "h":
            hit(deck,hand)
        elif ask[0].lower() == "s":
            print("Player Stands Dealer's Turn.")
            playing = False
        else:
            print("Sorry I didnt understand.")
            continue
        break
        
        
        
# To show 1 card, and value we are using show_some function 

def show_some(player,dealer):
    print("Dealers first card is hidden.")
    print(dealer.cards[1])
    print(dealer.value)
    print("\nPlayer's Hand:", *player.cards, sep='\n ')
    print(player.value)
    
    
# Show all is same like show some but infact it shows all cards.   
def show_all(player,dealer):


    print("Dealers Hand" , *dealer.cards)
    print(dealer.value)
    print("Players Hand" , *player.cards)
    print(player.value)
    
    
    
# The upcoming 5 function creates different winning stiations


def  player_busts(player,dealer,chips):
    print("BUST PLAYER!")
    chips.lose_bet()
def player_wins(player,dealer,chips):
    print("PLAYER WINS!")
    chips.win_bet()
def dealer_busts(player,dealer,chips):
    print("PLAYER WINS!DEALER BUSTED!")
    chips.win_bet()
def dealer_wins(player,dealer,chips):
    print("PLAYER BUST!")
    chips.lose_bet()
def push(player,dealer):
    print("Dealer and player tie! PUSH")


# This is game logic

while True:
    # Print an opening statement

    print("WELCOME TO THE BLACKJACK")
    # Create & shuffle the deck, deal two cards to each player

    deck = Deck()
    deck.shuffle()
    player = Hand()
    player.add_card(deck.deal())
    player.add_card(deck.deal())
    dealer = Hand()
    dealer.add_card(deck.deal())
    dealer.add_card(deck.deal())
    # Set up the Player's chips
    chips = Chips()
    
    # Prompt the Player for their bet
    take_bet(chips)
    
    # Show cards (but keep one dealer card hidden)
    show_some(player,dealer)
    
    while playing: # recall this variable from our hit_or_stand function
        
        # Prompt for Player to Hit or Stand
        hit_or_stand(deck,player)
        
        # Show cards (but keep one dealer card hidden)
        show_some(player,dealer)
        
        # If player's hand exceeds 21, run player_busts() and break out of loop
        if player.value > 21:
            player_busts(player,dealer,chips)
            break

    # If Player hasn't busted, play Dealer's hand until Dealer reaches 17
    if player.value <= 21:
        
        while dealer.value < 17:
            hit(deck,dealer)
    
        # Show all cards
        show_all(player,dealer)
        # Run different winning scenarios
        if dealer.value > 21:
            dealer_busts(player,dealer,chips)
        elif dealer.value > player.value:
            dealer_wins(player,dealer,chips)
        elif dealer.value < player.value:
            player_wins(player,dealer,chips)
        else:
            push(player,dealer)
                
                
         # Inform Player of their chips total
    print("\n Player total chips are at: {}".format(chips.total))
        # Ask to play again
    new_game = input("Would you like to play another hand? y/n")
    if new_game[0].lower() == "y":
        playing = True
        continue
    else:
        print("Thanks")
        playing = False
        break
    
  
